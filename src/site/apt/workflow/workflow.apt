
Workflow
~~~~~~~~~~~~~~

 SYWAPPs untersützt die Multi-Model Funktion.
 Dazu werden in sywapps modelle mit bestimmten Versionsnummern verwaltet. Die Versionsnummer 
 wird dabei im wesentlichen dazu verwendet um den Anwendungsbereich eines bestimmten Modells 
 zu definieren. Der Aufbau der Versionsummer setzt sich wie folgt zusammen:

  BEREICH-SPRACHE-OPTION-VERSION

** Bereich
~~~~~~~~~~~~~~

 ist der Anwendungsbereich innerhalb der Applikation.

    * public - öffentlche Geschäftsprozesse

    * system - interne System Workflows (z.B. Projetverwaltung, Profilverwaltung)

 Es können aber auch Kunden Bereiche verwaltet werden (z.b. KundeA, KundeB)

**Sprache
~~~~~~~~~~~~~~

 Über die Sprache werden die von SYWAPPs unterstützten Sprachkennzeichen angegeben

 z.b. "de", "en" usw..

**Option
~~~~~~~~~~~~~~

 Die Option wird verwendet um die bei der Geschäftsprozessauswahl angebotenen Modelle nochmals
  in Subbereiche zu unterscheiden.

 z.b. "IT", "Privat", "Projektmanagement"

 Hierfür wird ein Kürzel verwendet welches über die general.properties sprachabhäng übersetzt 
 wird (z.b. PM=Projektmanagement)

**Version
~~~~~~~~~~~~~~

 Version ist eine optinonale Versionsummer die derzeit nicht genutzt wird. Sie wird aber 
 trotzdem angegeben um künftige Versionsupdates zu unterstützten. Hierüber können somit neuere 
 Versionen eines bestimmten Prozessbereiches neu eingespiel werden.

 
 Beispiele für Modelldateien und die verwendeten Versionnummern

   * system-de-0.0.1  =  deutschsprachige Systemprozesse

   * system-en-0.0.1   = englischsprachige Systemprozesse

   * public-de-privat-0.0.1  = deutssprachige öffentliche Geschäftsprozesse aus dem privaten bereich

   * public-en-it-0.0.1 =englischsprachige öffentliche Geschäftsprozesse aus dem IT Bereich

   * citroen-fr-kd-0.0.1 = französischsprachige Geschäftsprozesse der Citroenniederlassungen aus dem Kundendienstbereich

 
 
 
 
 
* Startprozesse und SubStartProzesse
~~~~~~~~~~~~~~ 

 Die ProcessListMB stellt mit der methode getProcessList eine Map bereit über welche die 
 StartProcess Entities aus den einem Projekt zugeordneten Prozessgruppen ermittelt werden können.
 Dazu wird die $uniqueID eines Projektes übergeben. Die methode ermittelt dann anhand der Konfiguration
 des Projektes die ProcessEntities. Hier kommt ein intelligenter Caching Mechanismuß zum einsatz 
 welcher eine Lazy Loading unterstützt.
 
 Über eine weitere Funktion getSubProzessList kann dann auch die Liste von möglichen SubStartprozessen
 ermittelt werden. Dazu wird die $uniqueID eines Workitems übergeben, aus welchem die möglichen 
 Subprozesse errechnet werden.  
 
 Im Prinzip ist dieser Mechansimuß geeignet beliebige Verschachtelungen zu erreichen.
 Gedacht ist der Mechansimuß aber um bei der Neuanlage von ChildProzessen dem Benutzer 
 spezielle Prozessgurppen zur Auswahl anzubieten die sich aus dem Modell errechnen und selbst 
 nicht einem Projekt zugeordnet werden müssen.
 
 Beispiel Protokollsystem.
 
   Note: Jedem Projekt werden Startprozesse zugewiesen die über die ProcessListMB abgefragt werden können.
     Zu jedem Workitem können zusätzlich SubStartPozesse abgefragt werden welche sich aus dem 
     WorkflowGruppennamen ableiten und selbst nicht (!) dem Projekt zugeordnet sind.
 
 
* Anzeige von SubProzessgruppen
~~~~~~~~~~~~~~

 Subprozesse werden durch ein '~' Zeichen im Prozessgruppen namen gekennzeichnet.
 Diese werden nicht in der normalen prozessauswahl angezeigt.
 
 Die ProjectListMB stellt methoden bereit mit denen man diese prozesse abfragen kann. 
 Dazu muß man eine $Uniqueid eines Workitems übergeben aus welchem dann die aktuelle
 Modellversion sowie die Bezeichnung des Hauptprozesses ermittelt werden kann.
 
 Beispiel:
 
+---------------------------------------------------+
<!-- *** Sub Process List *** -->
	
		<h3><h:outputText value="#{messages.start_new_process}" /></h3>

		<ul>
				<ui:repeat
					value="#{projectlistMB.subProcessList[workitemMB.item['$uniqueid']]}"
					var="process">
					<li><h:commandLink 
						actionListener="#{workitemMB.doCreateChildWorkitem}"
						value="#{process.item['txtWorkflowSubGroup']}">
						<f:param name="id" value="#{process.item['$modelversion']}|#{process.item['numprocessid']}" />
					    </h:commandLink>
					    
		    
						<a4j:outputPanel layout="block">									
							<h:outputText value="#{process.item['rtfdescription']}"
								escape="false" />
						</a4j:outputPanel>
					</li>
				</ui:repeat>
		</ul>
+---------------------------------------------------+
					
					
 Es wird von der methode subProcessList auch in die ProzessEntites das neue
 Attribute "txtWorkflowSubGroup" eingefügt. dadurch kann man den Gruppennamen nach dem "~" zeichen 
 ausgeben und muß diesen Ausdruck nicht selbst berechnen. 
 