
The ChildWorkitemController
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The ChildWorkitemController acts as a front controller for child workitems. 
 A child workitem references another workitem. Each workitem can have a list of child
 workitems. The Controller provides methods to list the child references to a workitem. 
 So the ChildWorkitem can be used together with the wokflowController. The default type 
 of a new child worktiem is 'workitemchild'. The type can be changed and controlled by the 
 workflow model.

*Starting a child process
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 To start a child process you can define sub workflow groups to any define workflow group 
 in a model. A sub workflow group contains a '~' which separates the main workflow Group to 
 a sub workflow group.

 For example:

 * Project

 * Project~Task
 
 * Project~Minute

 []
 
 The Project workflow has two sub workflows which can be used together with the 
 ChildWorkitemController.

 This is an example how to start a child process depending on sub workfow groups:

+---------------------------------------+
<ui:repeat
		value="#{modelController.getSubWorkflowGroups(workflowController.workitem.item['txtWorkflowGroup'])}"
		var="group">
		<ui:param name="entity"
			value="#{modelController.getInitialProcessEntityByGroup(group)}"></ui:param>
	
		<h:commandButton value="#{fn:substringAfter(group,'~')}"
			class="ui-button-primary">
			<f:setPropertyActionListener
				target="#{childController.workitem.item['$modelversion']}"
				value="#{workflowController.workitem.item['$modelversion']}" />
			<f:setPropertyActionListener
			target="#{childController.workitem.item['$processid']}"
				value="#{entity.item['numProcessID']}" />
			<f:setPropertyActionListener
				target="#{childController.workitem.item['$uniqueidRef']}"
				value="#{workflowController.workitem.item['$uniqueid']}" />
			</h:commandButton>
	</ui:repeat>
+---------------------------------------+
	