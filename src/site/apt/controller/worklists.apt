
Worklists and Searching
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 The result of a worklist or a search query can be fully controlled by the Marty SearchController. 
 The Marty SearchController is a session scoped backing CDI bean providing mechanisms to performe
 JPQL queries as also a Lucene search. The SearchController provides the ItemCollection 
 'searchfilter' to define custom filter attributes. The filter can be controlled by any frontend view.

 The Marty SearchContoller extends the Imixs WorklistController CDI Bean. To compute the 
 worklist result, the SearchControler implements a custom ViewHandler which is delegating the 
 construction of a search- or a JPQL-query to a IQueryBuilder. Depending on the attributes of 
 the searchfilter the QueryBuilder provides either JPQL Queries or Lucene Search Queries. 
 The IQueryBuilder provides the method isSearchMode to give the searchController a hint which 
 query should be performed when the worklist is called from the client. 
 To customize the result an alternative CDI IQueryBuilder bean an be injected.
 
 
*JSF Integration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The Search result list is accessable by the searchControler form a JSF page:
 
+-----------------------------+
	<ui:repeat var="workitem" value="#{searchController.workitems}">
			.....
	</ui:repeat>
+-----------------------------+
 
 The general view type can be controlled by the property 'view'
 
+-----------------------------+
 <h:commandLink action="/pages/workitems/worklist" immediate="true"
	actionListener="#{searchController.doReset}">
	<f:setPropertyActionListener
		target="#{searchController.view}" value="worklist.owner" />
 </h:commandLink>
+-----------------------------+
 

 Also additional search params can be defined form the frontend view:
 
+-----------------------------+
 <h:commandLink action="/pages/workitems/worklist" immediate="true"
	actionListener="#{searchController.doReset}">
	<f:setPropertyActionListener
		target="#{searchController.searchFilter.item['txtprocessRef']}"
		value="#{workitem.item['$uniqueId']}" />
	<f:setPropertyActionListener
		target="#{searchController.searchFilter.item['txtsearch']}"
		value="Hello World" />
 </h:commandLink>
+-----------------------------+

*Lucene
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 For a fulltext search the searchquery is handled by the Imixs Workfow LucenePlugin. 
 The plugin allows some configuration through the imixs.properties. Per default the 
 lucene plugin uses a OR operator to search for multiple words.

 For example

+--------------+
 capital of Hungary
+--------------+
 
 results to an internal search phrase

+--------------+
 *capital* OR *of* OR *Hungary*
+--------------+

 The default operator can be chanted to 'AND'. The above mentioned query is then parsed as

+--------------+
 *capital* AND *of* AND *Hungary*
+--------------+

 To set the AND operator mode the imixs.properties param need to be set:

+--------------+
lucence.defaultOperator=OR
+--------------+

 This can be done by Administration->Configuration->additional properties. 
 Or directly in the imixs.properties file.

*Example of a custom QueryBuilder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 This is an example how to adapt the QueryBuilder

+--------------+
....
@Inject
private WorklistController worklistController;
 
public MyController() {
super();       
worklistController.setQueryBuilder(new MyCustomQueryBuilder())
}
 
...
protected class MyCustomQueryBuilder implements IQueryBuilder {
 
@Override
public String getSearchQuery(ItemCollection searchFilter) {
String sSearchTerm = "";
 
Date date = searchFilter.getItemValueDate("datdate");
....
return sSearchTerm;
 
 
}
public String getJPQLStatement(ItemCollection queryFilter) {
String sQuery = "SELECT DISTINCT wi FROM Entity AS wi ";
.....
return sQuery;
}
}
+--------------+
