
Worklists and Searching
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 The result of a worklist or a search query can be fully controlled by the Marty SearchController bean. 
 This is a session scoped backing bean providing mechanisms for performing JPQL query as also a 
 Lucene search. The SearchController provides a ItemCollection 'searchfilter' to define custom filter 
 attributes.

 The Marty SearchContoller extends the Imixs WorklistController CDI Bean. 
 To compute the worklist result the SearchControler implemnts a custom IViewHandler which is delegating the 
 construction of a search of JPQL Query to a  as a IQueryBuilder.
 Depending on the attributes of the searchfilter the QueryBuilder provides JPQL Queries or Lucene Search Queries. 
 The IQueryBuilder provides the method isSearchMode to give the searchController a hint wich query should be 
 performed when the worklist is called from the client. 

*Lucene
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 For a fulltext search the searchquery is handled by the Imixs Workfow LucenePlugin. 
 The plugin allows some configuration through the imixs.properties. Per default the 
 lucene plugin uses a OR operator to search for multiple words.

 For example

+--------------+
 capital of Hungary
+--------------+
 
 results to an internal search phrase

+--------------+
 *capital* OR *of* OR *Hungary*
+--------------+

 The default operator can be chanted to 'AND'. The above mentioned query is then parsed as

+--------------+
 *capital* AND *of* AND *Hungary*
+--------------+

 To set the AND operator mode the imixs.properties param need to be set:

+--------------+
lucence.defaultOperator=OR
+--------------+

 This can be done by Administration->Configuration->additional properties. 
 Or directly in the imixs.properties file.

*Example of a custom QueryBuilder
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 This is an example how to adapt the QueryBuilder

+--------------+
....
@Inject
private WorklistController worklistController;
 
public MyController() {
super();       
worklistController.setQueryBuilder(new MyCustomQueryBuilder())
}
 
...
protected class MyCustomQueryBuilder implements IQueryBuilder {
 
@Override
public String getSearchQuery(ItemCollection searchFilter) {
String sSearchTerm = "";
 
Date date = searchFilter.getItemValueDate("datdate");
....
return sSearchTerm;
 
 
}
public String getJPQLStatement(ItemCollection queryFilter) {
String sQuery = "SELECT DISTINCT wi FROM Entity AS wi ";
.....
return sQuery;
}
}
+--------------+
