
Browser Cache and History Back Button
~~~~~~~~~~~~~~

 In JSF the browser history back button can lead into an inconsistent page state which can 
 produce unexpected states in processed data. Especially for the WorkflowService this can lead
 into a wrong process state of a workitem. For example if a user processes a workitem, and
 then navigates back to the previous workitem state. If the user clicks again on a workflow activity 
 the workitem can be processed wrong.
 There a a lot of differnt use cases leading in such an desynchronized state:


* Use-Case-1 - two brower tabs with same workitem
~~~~~~~~~~~~~~
 * The user open a browserwindow and navigates to a workitem (1)
 
 * The user open a second browser window and navigates to the same workitem (1)
 
 * The user process the workitem in the second browser window
 
 * The user switch back to the first browser window 
 
     * the data in the first browser window is now deprecated.
     
 * The user process the workitem (1) in the first browser window
 
 []
 
 <<Expected behavior:>>

 An error message occurs telling the user that his data is outdated. The browserdata will be 
 again synchronized. So a second save now succeeds. 
 
  


* Use-Case-2 - two browser tabs with different workitems
~~~~~~~~~~~~~~
 * The user open a browserwindow and navigates to a workitem (1).
 
 * The user open a second browser window and navigates to another workitem (2)
 
 * The user switch back to the first browser window 
 
     * the data in the first browser window is no longer synchronized with the backend     
 * The user process the workitem (1) in the first browser window
 
 []
 
 <<Expected behavior:>>
 
 The phase listener recognizes the wrong workitem (2) and reloads workitem (1) before 
  'applyDataPhase'. As workitem (1) was not modified since the browser tab was openend the 
  workitem (1) is processed correctly. No error occurs
  
  
  
  
* Use-Case-3 - HistoryBack Navigation
~~~~~~~~~~~~~~
 * The user open a browserwindow and navigates to a workitem (1).
 
 * The user navigates to a second workitem (2).
 
 * The user click on browser history back to get back directly to workitem (1) from workitem (2)
 
     * the data for workitem (1) - comming from browsers cache is no longer synchronized with 
       the backend workitem (2)
       
 * The user now process the workitem (1)
 
 []
 
 <<Expected behavior:>>
 
  The phase listener recognizes the wrong workitem (2) and reloads workitem (1) before 
  'applyDataPhase'. The workitem (1) is processed correctly. No error occurs



* Use-Case-4 - HistoryBack Navigation with different $modified date
~~~~~~~~~~~~~~
 * The user open a browserwindow and navigates to a workitem (1).
 
 * The user process the workitem (1) with leads to a new process state ($modified changed).
 
 * The user click on browser history back to get back to a previous state of workitem (1) 
 
     * the data for workitem (1) - comming from browsers cache is no longer synchronized with 
       the backend workitem (1) which was processed in the meantime.
 * The user now process the workitem (1)
 
 []
 
 <<Expected behavior:>>

  The phase listener recognizes the wrong workitem uniqueid maches. But the $modified not.
  An error message occurs telling the user that his data is outdated. The browserdata will be 
 again synchronized. So a second save now succeeds. 



* Use-Case-5 - Start new Workitem navigate to different Browser Window
~~~~~~~~~~~~~~
 * The user open a browserwindow and start to create a new workitem (1).
 
 * The user open another browser window and navigate to another workitem (2)
 
 * The user process the workitem 2 (BrowserCacheControler recoginizes 
 
     * the data for workitem (2) is deprecated but BrowserCacheController reloads this data into the backend and process complets. 
     
 * The user switch back to the frist browser window with the new and empty  workitem (1) 
 
 * The user fills in data and clicks on a action (e.g. save) 
 
 []
 
 <<Expected behavior:>>

  The phase listener recognizes that the user is posing a complete new workitem which is different to the last 
  processed workitem in the backend. nd clea wrong workitem uniqueid maches. But the $modified not.
  An error message occurs telling the user that his data is outdated. The browserdata will be 
 again synchronized. So a second save now succeeds. 







The CacheConroller
~~~~~~~~~~~~~~

 The Class org.imixs.marty.util.BrowserCachController can be used to verify and synchronize workitems with the 
 backend as described in the user cases above. Also the Controller allows to disable the browser caching.
 
 To Activate the BrowserCacheControler a marty facelet can be placed inside the h:form tag:
 
+-----------------------------------+
  <h:form>
 	<marty:cacheControl />
 		.....
  </h:form>
+-----------------------------------+
 
 This faclet will add two hidden fields storing the $unqiueid and $modified data. During the APPLY_REQUEST_VALUES 
 phase these data will be verified with the current backenddata of the WorkflowController.
 The Errormessage 'BROWSER_DATA_INVALID' created by the controller can be customized in the resource bundle 'app'. 
 
 
* Disable the Browser Cache for a single page
~~~~~~~~~~~~~~

 The BrowserCacheController allows also to disable the browser cache. 
 There for the attribute 'clear=true' can be added:
 
+--------------------------+
  <!-- Disable browser cache! -->
  <h:form>
 	<marty:cacheControl clear="true" />
 		.....
  </h:form>
+--------------------------+

 This tag clears the brwwser cache and prevents the browser from caching a page by setting 
 "Cache-Control" to "no-cache, no-store, must-revalidate".


