The Buid- and Releasemanagement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 The Imixs-Office-Workflow Project consists of the main framework 'Marty' providing a EJB
 and a Java Util module and different subprojects containing complete workflow 
 applications or JEE modules. All components in this project use the  same release and versioning management. 
 The following section gives an overview how release management and versioning is handled in 
 this project. In general we are using "{{{http://semver.org/}Semantic Versioning}}" 
 from {{{http://tom.preston-werner.com/}Tom Preston-Werner}}.

*The Release Number
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 The release Number is separated into three digits.
 
+---------------------+
  2. 0. 1 
  |  |  |-- patch level
  |  |-------- minor version 
  |-------------- major version
+---------------------+


**Major Version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The main version number indicates the general main releases. 
 This number did not change very often.
 Typical this number will be increase when a general redesign of the project design
 is done or a fundamental new technology or framework is used like switching to Java 8. 
 Often a new Major version implicates the need of a migration from older versions. 
 You can not mix artifacts or components with different major versions!
 
**Minor Version
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The minor version number is used for new features or enhancements. For example adding 
 a new controller or a service EJB or a new version of Imixs-Workflow can lead to an increase 
 of the minor version number. 
 As we use Maven as the general build and configuration framework, minor versions are typical 
 also reflected in dependencies. 
 You should not mix artifacts or components 
 with different major versions.
 

**Patch Level
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The last digit is used for the Patch Level of a release. It indicates bug fixes made 
 after a minor or major release. It is strongly recommended to always use the latest patch 
 level version!


The Release Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 All releases of components and applications from this project are build with the configuration 
 and build framework Maven.

 During development we work with snapshot staging concept from maven like in the 
 Imixs Workflow main project. There for we use the {{{http://maven.apache.org/maven-release/maven-release-plugin/examples/prepare-release.html}mvn release command}} 
 to release a new version. 
 
+-------------------+
mvn release:prepare 
+-------------------+
 
 The current development release is located in the master branch. 
 If a version is stable or used in a productive environment we create a release from the 
 latest development version. A new release will be tagged in the code repository.
 For details about the maven release process see {{{https://github.com/imixs/imixs-workflow/wiki/Releasemanagement-and-versioning}imixs releasmanagement}}
 
 [Note:] A new release may not contain any snapshot dependencies from imixs-workflow components! 
 
 Patches of an already release version are managed in a release branch with the major and 
 minor version number.
 For example
 
  
+---------------------+
imixs-marty-2.2  
+---------------------+ 


Create a release manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 To create a new release follow these steps:

 [[1]] Switch into the master branch 
 
 [[2]] Verify that your current development sources are up to date
 
 [[3]] Remove existing snapshot dependencies. (e.g from Imixs-Workflow)

 [[4]] Run tests on the master branch. Run all the tests. If one or more fail, fix them first.
 
 [[5]] Release the current snaptshot release
 
+----------+
mvn clean
mvn release:prepare
+----------+
 
 [[6]] remove the maven release prepare and backup pom files
 
 [[7]] switch into the new tag version and build the new released artefacts.
 
  []
 
 After a new version was released the last master build should be uploaded into the imixs repository. 
 As we did not use the staging process provided by sonatype this process is done manually.
